name: Java CI/CD Pipeline
# 워크플로우의 이름을 지정함. 이 이름은 GitHub Actions의 'Actions' 탭에서
# 워크플로우를 식별하는 데 사용됨

on:
  # 워크플로우가 실행될 조건 및 언제 실행 될 지를 정의함.
  push:
    branches:
      - main  # main 브랜치에 코드가 푸시될 때 워크플로우가 실행된다.
  pull_request:
    branches:
      - main  # main 브랜치로의 풀 리퀘스트가 생성될 때 워크플로우가 실행된다.

jobs:
  build:
    runs-on: ubuntu-latest
    # 위 작업(job)은 최신 버전의 Ubuntu 운영 체제에서 실행된다.

    steps: # steps의 각 단계들은 프로젝트 빌드 및 테스트를 수행하는 단계를 포함된다.
      # 1. 저장소에서 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3
        # 위는 GitHub Actions에서 제공하는 표준 작업으로, 저장소의 코드를 가져온다.

      # 2. JDK 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3  # Java 개발에 필요한 JDK를 설정한다.
        with:
          java-version: '21'  # 사용할 Java의 버전을 지정.
          distribution: 'temurin'  # Eclipse Temurin JDK 사용

      # 3. 의존성 설치 및 빌드
      - name: Build with Gradle
        run: ./gradlew build #--no-daemon  # Gradle 빌드 도구를 사용하여 프로젝트를 빌드한다.

      # 4. 테스트 실행
      #- name: Run tests
      #  run: ./gradlew test #--no-daemon  # 프로젝트의 테스트를 실행하여 코드의 품질을 검증한다.

  # deploy 작업에서는 빌드 작업이 완료된 후 실행되며, SSH를 통해 서버에 코드를 배포하고
  # 애플리케이션을 실행하는 작업을 포함한다. 또한 민감한 정보(예: 서버 로그인 정보)를
  # GitHub Secrets로 관리하여 보안을 유지한다.
  deploy:
    runs-on: ubuntu-latest  # 이 작업(job)도 Ubuntu에서 실행한다.
    needs: build  # 'build' 작업이 성공적으로 완료된 후에만 실행된다.

    steps:
      # 배포 단계도 코드 체크아웃부터 시작.
      - name: Check out code
        uses: actions/checkout@v3

      # JDK 설정은 빌드 작업과 동일.
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 5. 배포 단계 (SSH를 사용하여 서버에 배포)
      - name: Deploy to server
        env:
          SERVER: ${{ secrets.SERVER }}  # 서버 주소를 GitHub Secrets에서 가져옴
          USERNAME: ${{ secrets.USERNAME }}  # 사용자 이름
          PASSWORD: ${{ secrets.PASSWORD }}  # 비밀번호
        run: |
          sshpass -p "$PASSWORD" ssh -o StrictHostKeyChecking=no $USERNAME@$SERVER << 'EOF'
          cd spring-gift-point  # 배포할 디렉토리로 이동
          git pull origin main  # 최신 코드 가져오기
          ./gradlew bootJar # 빌드 수행
          # 스프링 부트 애플리케이션 실행 (백그라운드에서 실행)
          java -jar build/libs/spring-gift-0.0.1-SNAPSHOT.jar &
          EOF
